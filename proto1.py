# -*- coding: utf-8 -*-
"""Proto1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WOiJffZ6QNleVAJMMMwqTGMFFBIA82c0
"""

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.colors import BoundaryNorm
from scipy import signal
from scipy.fftpack import fft, ifft, dct
from sklearn import mixture
from scipy.spatial import distance
from lab1_tools import trfbank, lifter
from scipy.cluster.hierarchy import dendrogram, linkage
from lab1_tools import tidigit2labels as getLabels

def mspec(samples, winlen = 400, winshift = 200, preempcoeff=0.97, nfft=512, samplingrate=20000):
    """Computes Mel Filterbank features.

    Args:
        samples: array of speech samples with shape (N,)
        winlen: lenght of the analysis window
        winshift: number of samples to shift the analysis window at every time step
        preempcoeff: pre-emphasis coefficient
        nfft: length of the Fast Fourier Transform (power of 2, >= winlen)
        samplingrate: sampling rate of the original signal

    Returns:
        N x nfilters array with mel filterbank features (see trfbank for nfilters)
    """
    print('hello hello')
    frames = enframe(samples, winlen, winshift, samplingrate)
    preemph = preemp(frames, p=0.97)
    windowed = windowing(preemph)
    spec = powerSpectrum(windowed, nfft)
    return logMelSpectrum(spec, samplingrate)

def mfcc(samples, winlen = 400, winshift = 200, preempcoeff=0.97, nfft=512, nceps=13, samplingrate=20000, liftercoeff=22):
    """Computes Mel Frequency Cepstrum Coefficients.

    Args:
        samples: array of speech samples with shape (N,)
        winlen: lenght of the analysis window
        winshift: number of samples to shift the analysis window at every time step
        preempcoeff: pre-emphasis coefficient
        nfft: length of the Fast Fourier Transform (power of 2, >= winlen)
        nceps: number of cepstrum coefficients to compute
        samplingrate: sampling rate of the original signal
        liftercoeff: liftering coefficient used to equalise scale of MFCCs

    Returns:
        N x nceps array with lifetered MFCC coefficients
    """
    mspecs = mspec(samples, winlen, winshift, preempcoeff, nfft, samplingrate)
    ceps = cepstrum(mspecs, nceps)
    lmfcc = lifter(ceps, liftercoeff)

    return lmfcc, ceps

def enframe(samples, winlen, winshift, samplingrate):
    """
    Slices the input samples into overlapping windows.

    Args:
        winlen: window length in samples.
        winshift: shift of consecutive windows in samples
    Returns:
        numpy array [N x winlen], where N is the number of windows that fit
        in the input signal
    """

    frames=[]
    i=0
    #samples=example['samples']
    #winlen=int((winlen/1000)/(1/samplingrate))
    #winshift=int((winshift/1000)/(1/samplingrate))
    while((i+winlen)<=len(samples)):
      frames.append(samples[i:i+winlen])
      i=i+winshift
    #print(frames)
    #print(len(frames))`
    #plt.pcolormesh(frames)
    return frames

def preemp(frames, p=0.97):
    """
    Pre-emphasis filter.

    Args:
        input: array of speech frames [N x M] where N is the number of frames and
               M the samples per frame
        p: preemhasis factor (defaults to the value specified in the exercise)

    Output:
        output: array of pre-emphasised speech samples
    Note (you can use the function lfilter from scipy.signal)
    """
    preem_wav = signal.lfilter([1, -p], [1], frames)
    #plt.pcolormesh(preem_wav)
    return preem_wav

def windowing(input):
    """
    Applies hamming window to the input frames.

    Args:
        input: array of speech samples [N x M] where N is the number of frames and
               M the samples per frame
    Output:
        array of windowed speech samples [N x M]
    Note (you can use the function hamming from scipy.signal, include the sym=0 option
    if you want to get the same results as in the example)
    """
    window = signal.hamming(len(input[1]),sym=0)
    windowed=np.zeros(input.shape)
    for i in range(len(input)):
      windowed[i]=np.multiply(input[i],window)
    #plt.pcolormesh(windowed)

    return windowed

def powerSpectrum(input, nfft):
    """
    Calculates the power spectrum of the input signal, that is the square of the modulus of the FFT

    Args:
        input: array of speech samples [N x M] where N is the number of frames and
               M the samples per frame
        nfft: length of the FFT
    Output:
        array of power spectra [N x nfft]
    Note: you can use the function fft from scipy.fftpack
    """
    spectrum = fft(input, n=nfft, axis=-1, overwrite_x=False)
    spec = np.abs(spectrum)**2
    #plt.pcolormesh(spec)
    return spec

def logMelSpectrum(input, samplingrate):
    """
    Calculates the log output of a Mel filterbank when the input is the power spectrum

    Args:
        input: array of power spectrum coefficients [N x nfft] where N is the number of frames and
               nfft the length of each spectrum
        samplingrate: sampling rate of the original signal (used to calculate the filterbank shapes)
    Output:
        array of Mel filterbank log outputs [N x nmelfilters] where nmelfilters is the number
        of filters in the filterbank
    Note: use the trfbank function provided in lab1_tools.py to calculate the filterbank shapes and
          nmelfilters
    """
    fil_bank = trfbank(samplingrate, 512, lowfreq=133.33, linsc=200/3., logsc=1.0711703, nlinfilt=13, nlogfilt=27, equalareas=False)
    mspec =  np.log(np.dot(input,np.transpose(fil_bank)))
    #plt.pcolormesh(mspecc)
    return mspec

def cepstrum(input, nceps):
    """
    Calulates Cepstral coefficients from mel spectrum applying Discrete Cosine Transform

    Args:
        input: array of log outputs of Mel scale filterbank [N x nmelfilters] where N is the
               number of frames and nmelfilters the length of the filterbank
        nceps: number of output cepstral coefficients
    Output:
        array of Cepstral coefficients [N x nceps]
    Note: you can use the function dct from scipy.fftpack.realtransforms
    """
    mspec_dct = dct(input, type=2, axis=1, norm='ortho')
    mspec_dct_13 = mspec_dct[:,0:nceps]
    print('hello')
    return mspec_dct_13

def dtw(x, y):
    """Dynamic Time Warping.

    Args:
        x, y: arrays of size NxD and MxD respectively, where D is the dimensionality
              and N, M are the respective lenghts of the sequences
        dist: distance function (can be used in the code as dist(x[i], y[j]))

    Outputs:
        d: global distance between the sequences (scalar) normalized to len(x)+len(y)
        LD: local distance between frames from x and y (NxM matrix)
        AD: accumulated distance between frames of x and y (NxM matrix)
        path: best path thtough AD

    Note that you only need to define the first output for this exercise.
    """
    N = len(x)
    M = len(y)

    # LD computation

    LD = np.zeros((N,M))
    for n in range (N):
      for m in range(M):
        LD[n,m] = euclidean(x[n,:], y[m,:])

    # AD computation

    AD = np.zeros((N,M))
    AD[0,0] = LD[0,0]
    for i in range (1,N): #for the first column in the matrix
      AD[i,0] = AD[i-1,0] + LD[i,0]
    for j in range (1,M): #for the first row in the matrix
      AD[0,j] = AD[0,j-1] + LD[0,j] 

    for n in range(1,N):
      for m in range(1,M):
        AD[n,m] = LD[n,m] + np.min([ AD[n-1,m-1], AD[n,m-1], AD[n-1,m] ])

    GD =  AD[N-1,M-1] / (N+M)

    return GD
